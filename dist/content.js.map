{"version":3,"file":"content.js","mappings":";;;;AAAA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAOA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA","sources":["webpack://phishscan/./src/content.js"],"sourcesContent":["// Initial Popup Response Handling\n// variable for initial url\nlet lastUrl = location.href;\n\n// Controller function for detecting url changes\nfunction urlDetectionController() {\n  currentUrl = window.location.href;\n\n  if (currentUrl != lastUrl) {\n    console.log(`URL Changed`);\n    console.log(`Old URL: ${lastUrl}`);\n    console.log(`New URL: ${currentUrl}`);\n    lastUrl = currentUrl;\n    emailOpenController(currentUrl);\n  }\n}\n\n// function for detecting email services and if email is opened\nfunction emailOpenController(providedUrl) {\n  const url = providedUrl;\n\n  let emailServiceDetected = false;\n  let emailOpenedCheck = false;\n\n  if (\n    url.includes(\"mail.google.com\") ||\n    url.includes(\"outlook.office365.com\") ||\n    url.includes(\"outlook.live.com\") ||\n    url.includes(\"mail.yahoo.com\") ||\n    url.includes(\"icloud.com/mail/\")\n  ) {\n    emailServiceDetected = true;\n    console.log(`Service detected`);\n  }\n\n  if (emailServiceDetected) {\n    console.log(\"Opened Email Service\");\n    console.log(`Url opened: ${url}`);\n\n    if (\n      url.includes(\"mail.google.com/mail/u/0/\") &&\n      url.match(/#inbox\\/[a-zA-Z0-9]+/)\n    ) {\n      emailOpenedCheck = true;\n      console.log(`Gmail: Email opened`);\n      scanPage();\n    }\n    if (\n      (url.includes(\"outlook.office365.com/mail/\") ||\n        url.includes(\"outlook.live.com/mail/\")) &&\n      (url.match(/\\/mail\\/inbox\\/id\\/[a-zA-Z0-9]+/) ||\n        url.match(/\\/mail\\/[0-9]+\\/sentiments\\/id\\/[a-zA-Z0-9]+/))\n    ) {\n      emailOpenedCheck = true;\n      console.log(`Outlook: Email opened`);\n    }\n    if (url.includes(\"mail.yahoo.com\") && url.includes(\"/d/message/\")) {\n      emailOpenedCheck = true;\n      console.log(`YahooMail: Email opened`);\n    }\n    if (\n      url.includes(\"icloud.com/mail\") &&\n      url.match(/#.*\\/message\\/[a-zA-Z0-9]+/)\n    ) {\n      emailOpenedCheck = true;\n      console.log(`Apple: Email opened`);\n    }\n  }\n\n  console.log(\n    `Is service: ${emailServiceDetected}\\nEmail opened: ${emailOpenedCheck}`\n  );\n\n  chrome.runtime.sendMessage({\n    message: \"updateStatus\",\n    emailServiceDetected,\n    emailOpenedCheck,\n    url,\n  });\n}\n\n//Function pageStateCheck was created using some advice found on StackOverflow.\n//This function tracks the changes in the state of tabs\n/***************************************************************************************\n *    Title: How to detect if URL has changed after hash in JavaScript\n *    Author: aljgom\n *    Date: 15/10/2018\n *    Availability: https://stackoverflow.com/questions/6390341/how-to-detect-if-url-has-changed-after-hash-in-javascript\n *\n ***************************************************************************************/\n\nfunction pageStateCheck() {\n  let oldPushState = history.pushState;\n  let oldReplaceState = history.replaceState;\n\n  history.pushState = function pushState() {\n    oldPushState.apply(this, arguments);\n    urlDetectionController();\n  };\n\n  history.replaceState = function replaceState() {\n    oldReplaceState.apply(this, arguments);\n    urlDetectionController();\n  };\n\n  window.addEventListener(\"popstate\", urlDetectionController);\n}\n\n// calling pageStateCheck\npageStateCheck();\n\n// calling urlDetection after a minute\nsetTimeout(urlDetectionController, 1000);\n\n// Email Page Scanning\n//Using listener for receiving scan request\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  if (request.action === \"scanPage\") {\n    console.log(\"Content: Performing scan\");\n    // Saving scan page results into results variable\n    const results = scanPage();\n    console.log(\"Content: Email scan completed\");\n\n    // Saving id from the request into tab ID variable\n    const tabId = request.tabId;\n    // Sending scan results back to background\n    sendResponse({ tabId: tabId, results: results });\n\n    return true;\n  }\n\n  if (request.action === \"highlightPage\") {\n    //Highlight test\n    console.log(\"Content: Doing Highlight\");\n    highlightResults();\n  }\n});\n\n//Function for scanning email contents\nfunction scanPage() {\n  console.log(`Content: Starting scan`);\n  //Defining different tags that hold text\n  const tags = [\"h1\", \"h2\", \"h3\", \"h4\", \"p\", \"span \", \"div\", \"a\"];\n\n  // Empty lists for storing text and links\n  var emailContent = [];\n  var emailLinks = [];\n\n  tags.forEach((tag) => {\n    const elements = document.querySelectorAll(tag);\n    elements.forEach((element) => {\n      if (element.innerText) {\n        const text = element.innerText.trim();\n        if (text) {\n          emailContent.push(text);\n        }\n      }\n\n      if (element.tagName.toLowerCase() === \"a\" && element.href) {\n        emailLinks.push({ link: element.href, text: element.innerText.trim() });\n      }\n    });\n  });\n\n  console.log(`Content: Finished Email Scan`);\n\n  return {\n    emailText: emailContent,\n    emailLinks: emailLinks,\n  };\n}\n\n//Term Highlight\n// Function for highlighting the email page\nfunction highlightResults() {\n  const terms = [\"Cyber security\", \"SOC\"];\n  const tags = [\"h1\", \"h2\", \"h3\", \"h4\", \"p\", \"span\", \"div\", \"a\"];\n\n  terms.forEach((term) => {\n    tags.forEach((tag) => {\n      const elements = document.querySelectorAll(tag);\n      elements.forEach((element) => {\n        if (element.innerHTML.includes(term)) {\n          element.innerHTML = element.innerHTML.replaceAll(\n            term,\n            `<span style=\"background-color: yellow\">${term}</span>`\n          );\n        }\n      });\n    });\n  });\n}\n"],"names":[],"sourceRoot":""}