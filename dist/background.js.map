{"version":3,"file":"background.js","mappings":";;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAVA;AAYA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlCA;AAAA;AAAA;AAoCA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://phishscan/./src/background.js"],"sourcesContent":["//Creting a tab object for storing a pair of values\nconst tab = new Map();\n\n//chrome Listener for incoming messages\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  // Handling the status update request\n  if (request.message === \"updateStatus\" && sender.tab) {\n    const tabId = sender.tab.id.toString();\n    // Setting the storage of the local opened tab\n    chrome.storage.local.set({\n      [tabId]: {\n        emailServiceDetected: request.emailServiceDetected,\n        emailOpenCheck: request.emailOpenedCheck,\n        url: request.url,\n      },\n    });\n  }\n  // Handling the sending of local tab data\n  if (request.message === \"tabStatus\") {\n    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n      const defaultResponse = {\n        emailServiceDetected: false,\n        emailOpenedCheck: false,\n      };\n\n      if (tabs.length === 0) {\n        console.log(`No tabs open`);\n        sendResponse(defaultResponse);\n        return;\n      }\n\n      const tabId = tabs[0].id.toString();\n\n      chrome.storage.local.get(tabId, (result) => {\n        const tabData = result[tabId] || defaultResponse;\n\n        sendResponse(tabData);\n      });\n    });\n    return true;\n  }\n\n  // Handling the email scan request\n  if (request.action === \"startScan\") {\n    console.log(\"Background: Received Scan Request\");\n    const id = request.tabId;\n    console.log(`Background: Tab ID: ${id}`);\n\n    //Checking if the request contains an id\n    if (!id) {\n      console.log(\"Background: No id found\");\n      return;\n    }\n\n    //Sending a message to content.js\n    chrome.tabs.sendMessage(\n      id,\n      { action: \"scanPage\", tabId: id },\n      async (contentResponse) => {\n        //Checking response\n        if (!contentResponse) {\n          sendResponse({ error: \"No response from content.js\" });\n          return;\n        }\n        try {\n          //Obtaining JSON rules\n          const jsonRules = await fetch(\n            chrome.runtime.getURL(\"phishing_rules.json\")\n          )\n            .then((response) => {\n              console.log(\"Background: Obtaining JSON format\");\n              return response.json();\n            })\n            .then((data) => {\n              console.log(\"Background: Obtaining Fishing Data Rules\");\n              return data.phishing_detection_rules;\n            });\n\n          // Performing the check of the scan\n          const results = checkScan(jsonRules, contentResponse);\n          chrome.tabs.sendMessage(\n            id,\n            { action: \"highlightPage\", words: results.toHighlight, tabId: id },\n            async (contentResponse2) => {\n              if (!contentResponse2 || contentResponse2 === false) {\n                console.log(`Background: Highlight failed`);\n                sendResponse({ completed: false });\n              }\n\n              console.log(`Background: Highlighted Response Received`);\n              sendResponse({ completed: true, rules: results.rules });\n            }\n          );\n        } catch (error) {\n          console.log(`Unable to perform scan. Error: ${error}`);\n        }\n      }\n    );\n    return true;\n  }\n});\n\n// function for checking the scanned email content against JSON rules\nfunction checkScan(jsonFile, scanResults) {\n  const emailTextObject = scanResults.results.emailText;\n  const emailText = Object.values(emailTextObject).join(\" \").toLowerCase();\n  const emailLinksObject = scanResults.results.emailLinks;\n  const emailLinks = Object.values(emailLinksObject).join(\" \").toLowerCase();\n\n  console.log(`Backgorund:\\nEmail Text: ${emailText}`);\n  console.log(\"Background: Starting check of scans\");\n\n  var foundRules = [];\n  var wordsToHighlight = [];\n\n  try {\n    for (let i = 0; i < jsonFile.length; i++) {\n      const rule = jsonFile[i];\n      const words = rule.words;\n      const foundWords = [];\n      const foundLinks = [];\n\n      words.forEach((word) => {\n        const regularExpression = new RegExp(`\\\\b${word}\\\\b`, \"i\");\n        if (\n          regularExpression.test(emailText) ||\n          regularExpression.test(emailLinks)\n        ) {\n          foundWords.push(word);\n          wordsToHighlight.push(word);\n        }\n      });\n\n      //!Logic fo links to be added later as links rules have not yet been completed\n\n      if (foundWords.length > 0) {\n        if (foundLinks.length > 0) {\n          foundRules.push({\n            description: rule.description,\n            words: foundWords,\n            links: foundLinks,\n          });\n        } else {\n          foundRules.push({\n            description: rule.description,\n            words: foundWords,\n            links: \"Not found\",\n          });\n        }\n      }\n    }\n\n    if (foundRules.length > 0) {\n      console.log(`Background: Rules found: ${foundRules[0].description}`);\n    } else {\n      console.log(`Background: No rules found`);\n    }\n    if (wordsToHighlight.length > 0) {\n      console.log(\n        `Background:  Words that need to be highlighted: ${wordsToHighlight}`\n      );\n    } else {\n      console.log(`Background: Nothing to highlight`);\n    }\n\n    console.log(`Background: Check completed`);\n\n    return {\n      rules: foundRules,\n      toHighlight: wordsToHighlight,\n    };\n  } catch (error) {\n    console.log(`Background:  An error occured ${error}`);\n  }\n}\n"],"names":[],"sourceRoot":""}