{"version":3,"file":"background.js","mappings":";;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAVA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA","sources":["webpack://phishscan/./src/background.js"],"sourcesContent":["const tab = new Map();\n\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  if (request.message === \"updateStatus\" && sender.tab) {\n    const tabId = sender.tab.id.toString();\n    chrome.storage.local.set({\n      [tabId]: {\n        emailServiceDetected: request.emailServiceDetected,\n        emailOpenCheck: request.emailOpenedCheck,\n        url: request.url,\n      },\n    });\n  }\n  if (request.message === \"tabStatus\") {\n    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n      const defaultResponse = {\n        emailServiceDetected: false,\n        emailOpenedCheck: false,\n      };\n\n      if (tabs.length === 0) {\n        console.log(`No tabs open`);\n        sendResponse(defaultResponse);\n        return;\n      }\n\n      const tabId = tabs[0].id.toString();\n\n      chrome.storage.local.get(tabId, (result) => {\n        const tabData = result[tabId] || defaultResponse;\n\n        sendResponse(tabData);\n      });\n    });\n    return true;\n  }\n\n  if (request.action === \"startScan\") {\n    console.log(\"Received Scan Request\");\n\n    if (!request.tabId) {\n      console.log(\"No id found\");\n      return;\n    }\n\n    chrome.tabs.sendMessage(\n      request.tabId,\n      { action: \"scanPage\" },\n      async (response) => {\n        if (!response) {\n          sendResponse({ error: \"No response from content.js\" });\n          return;\n        }\n        try {\n          const rules = await fetch(\n            chrome.runtime.getURL(\"phishing_rules.json\")\n          )\n            .then((response) => {\n              console.log(\"Obtaining JSON format\");\n              response.json();\n            })\n            .then((data) => {\n              console.log(\"Obtaining Fishing Data Rules\");\n              data.phishing_detection_rules;\n            });\n\n          const results = checkScan();\n        } catch (error) {\n          console.log(`Unable to perform scan. Error: ${error}`);\n        }\n      }\n    );\n    return true;\n  }\n});\n"],"names":[],"sourceRoot":""}